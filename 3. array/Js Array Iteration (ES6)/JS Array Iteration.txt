# Recognize an Array:
	- typeof(array_name)
	- array_name instance of Array
	- Array.isArray(array_name)



# Terms:
	- loop, iteration, iterate, iterator, accumulator, accumulation,
	- A loop is defined as a segment of code that executes multiple times. Iteration refers to the process in which the code segment is executed once. One iteration refers to 1-time execution of a loop. A loop can undergo many iterations.
	- loop/iterative : a loop is a sequence of instruction s that is continually repeated until a certain condition is reached.
	- iterator: An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet.
	- iterate: perform or utter repeatedly.
	- iteration: An iteration refers to the process in which the code segment is executed once. One iteration refers to 1-time execution of a loop
	- accumulate/accumulation: gather, collect, assemble, amass, stockpile, pile up.
	- accumulator: An accumulator is a variable that the program uses to calculate a sum or product of a series of. values. A computer program does this by having a loop that adds or multiplies each successive. value onto the accumulator.



# Iteration in JS Array:

	- 3 types of loops, inorder to iterate through array till condition satisfy
		do while loop
		while loop
		for loop

	- methods to iterate through array till last elements
		* forEach()
		* map()
		* filter()
		* reduce()



# 1. forEach()
	- perform function on each element of array and change original array.
	- forEach(): method calls a function (a callback function) once for each array element.
	- returns undefined // you can define return explicitely

	const numbers = [45, 4, 9, 16, 25];
	numbers.forEach(myFunction);
	function myFunction(value, index, array) {
  	   txt += value + "<br>";
	}



# 2. map():
	- edit(perform function) and return each element of array into new array.
	- map(): method creates a new array by performing a function on each array element. callback function perform operation on each element and push |return  those elements into new array
	- returns new_array (by performing a function)
    - method does not change the original array.

	const numbers1 = [45, 4, 9, 16, 25];
	const numbers2 = numbers1.map(myFunction);

	function myFunction(value, index, array) {
	  return value * 2;
	}

	- note callback function in map edit and return each element so that they can be pushedinto new array



# 3. filter():
	- return element of array into new array only if callback function is satisfyed|true.
	- filter(): method creates a new array with array elements that passes a filter test of callbackfunction.
    - returns new_array (by performing a function_filter_test)

	const numbers = [45, 4, 9, 16, 25];
	const over18 = numbers.filter(myFunction);

	function myFunction(value, index, array) {
	  return value > 18;
	}

	- note callback function in filter check the condition and return boolen(true|false) and only push elements into new array if contdition inside callback function satisfies and return true.


# callback function of both map() and filter() takes (a_element, index_of_element, array_) as parameters respectively



# 4. reduce():
	- method runs a function on each array element to produce (reduce it to) a single value.
	- does not reduce the original array.
	- returns a_single_value (by performing a callback_reduce_function)

	const numbers = [45, 4, 9, 16, 25];
	let sum = numbers.reduce(myFunction);

	function myFunction(total, value, index, array) {
	  return total + value;
	}