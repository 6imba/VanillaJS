# Introduction:
    - An array is a data-type that can hold many values under a single name, and you can access the values by referring to an index number.
    - Arrays are Objects.

# Creating an Array:
    1) Using an array literal is the easiest way to create a JavaScript Array.
        Syntax: []
            const array_name = [item1, item2, ...];

        - Spaces and line breaks are not important. A declaration can span multiple lines:
            const cars = [
                            "Saab",
                            "Volvo",
                            "BMW"
                            ];
        - You can also create an array, and then provide the elements:
            const cars = [];
            cars[0]= "Saab";
            cars[1]= "Volvo";
            cars[2]= "BMW";

    2) Using the JavaScript Keyword new with JavaScript native Array() function:
       JavaScript has a built in array constructor new Array().
        Syntax:new Array()
            - const cars = new Array("Saab", "Volvo", "BMW");

# Accessing Array Elements:
    1) You access an array element by referring to the index number:
        const cars = ["Saab", "Volvo", "BMW"];
        let car = cars[0];

# Changing an Array Element:
    1) You can change an array element by assigning new value to the index number.
        const cars = ["Saab", "Volvo", "BMW"];
        cars[0] = "Opel";

# Access the Full Array:
    1) With JavaScript, the full array can be accessed by referring to the array name.
        const cars = ["Saab", "Volvo", "BMW"];
        document.getElementById("demo").innerHTML = cars;
    2) New element can also be added to an array using the length property.
        const fruits = ["Banana", "Orange", "Apple"];
        fruits[fruits.length] = "Lemon";
    - WARNING !
        - Adding elements with high indexes can create undefined "holes" in an array:
        const fruits = ["Banana", "Orange", "Apple"];
        fruits[6] = "Lemon";

# Adding Array Elements:
    1) push() methods:
        const fruits = ["Banana", "Orange", "Apple"];
        fruits.push("Lemon");

# Array Properties and Methods:
    arr_name.length
    arr_name.sort()

# Loop Array Elements:
    const fruits = ["Banana", "Orange", "Apple", "Mango"];

    1) for loop:
        for (let i = 0; i < fruits.length; i++) {
            console.log(fruits[i])
        }

    2) forEach() fucntion:
        fruits.forEach(myFunction);
        function myFunction(fruit) {
            console.log(fruit)
        }

# Associative Arrays
        Many programming languages support arrays with named indexes.
        Arrays with named indexes are called associative arrays (or hashes).
        JavaScript does not support arrays with named indexes.
        In JavaScript, arrays always use numbered indexes.
        If you use named indexes, JavaScript will redefine the array to an object.
        Example:
        const person = [];
            - person[0] = "John"; VS person["firstName"] = "John";

# The Difference Between Arrays and Objects:
    - In JavaScript, arrays use numbered indexes.
        VS
    - In JavaScript, objects use named indexes.

- Arrays are a special kind of objects, with numbered indexes.

# When to Use Arrays. When to use Objects.
    - JavaScript does not support associative arrays.
    - You should use objects when you want the element names to be strings (text).
    - You should use arrays when you want the element names to be numbers.

# How to Recognize an Array.
    - typeof() operator
    - .isArray() method
    - instanceof operator

# Converting Arrays to Strings:
    - .toString(): The JavaScript method toString() converts an array to a string of (comma separated) array values.
    - .join(): The join() method also joins all array elements into a string. It behaves just like toString(), but in addition you can specify the separator.

# Adding & Removing elements:
    - .pop() method removes the last element from an array.
    - .push() method adds a new element to an array (at the end).
    - .shift() method removes the first array element and "shifts" all other elements to a lower index.
    - .unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements.

# JavaScript Array delete().
    - Using delete leaves undefined holes in the array. So, use pop() or shift() instead.

# Merging (Concatenating) Arrays.
    - .concat() method creates a new array by merging (concatenating) existing arrays.

# Splicing and Slicing Arrays:
    - .splice() method adds new items to an array. Creates a new array.
    - .slice() method slices out a piece of an array.

# 