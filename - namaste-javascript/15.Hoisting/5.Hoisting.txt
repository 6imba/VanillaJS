# In other programming language you cannot use/invoke variable before they are declared, where as in JavaScript you can do it.

# Incase of JavaScript, interpreter of JavaScript engine look all the script from top to button even before executing the code and allocates the memory for all the variable,function,classes.(See later: allocates memory either in global scope or block scope)

# Hoisitng:
    - JavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables or classes to the top of their scope, prior to execution of the code.
    - where its initial value is as undefined in case of primitive datatype,arrowfunction,function_expression_variable and incase of normal function and class it has its defination as value.
    
    - Hoisting is JavaScript's default behavior of moving declarations to the top.
    
    - JavaScript Declarations are Hoisted.
    - JavaScript Initializations are Not Hoisted.
    
    - In JavaScript, a variable can be declared after it has been used.
    - In other words; a variable can be used before it has been declared.
    - Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).
    - Hoisting allows functions to be safely used in code before they are declared.

# Hoisting for let and const Keywords:
    - Variables defined with let and const are hoisted to the top of the block, but not initialized. 

    # 1:
        var x = 10;
        function greet(){
            console.log("Hi from Simba!")
        }
        console.log(x)
        greet()
        console.log(greet)
        > Output:
            10
            Hi from Simba!
            [Function: greet]

    # 2:
        console.log(x)
        greet()
        console.log(greet)
        var x = 10;
        function greet(){
            console.log("Hi from Simba!")
        }
        > Output:
            undefined
            Hi from Simba!
            [Function: greet]

# Even before code start executing, javascript engine allocates the memory for each and every variable and function.

# DeBug:
    - ReferenceError: means variable is neither declared nor defined at all.
    - undefined: means declared but not defined.

# JavaScript behaviour:
    - JavaScript Declarations(variable and function) are Hoisted.
    - JavaScript Initializations are Not Hoisted.(So you see undefined)
    - JavaScript function defination is hoisted with value as defination whereas JavaScript arrow_function & function_expression_hold_by_variable is  hoisted with undefined value as it act as variable.
    - Because of hoisting behaviour of javascript by which you can use vairables even before they are initialized.

