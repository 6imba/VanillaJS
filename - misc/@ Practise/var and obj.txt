let car = "Fiat"; #variable #value can be string, int, function
const car = {type:"Fiat", model:"500", color:"white"}; #object # values are written as name:value pairs separated by a colon

Objects property and property value:
Property	Property Value
type            fiat
color           white

Accessing Object Properties
You can access object properties in two ways:
objectName.propertyName #car.type
or
objectName["propertyName"] #car.["type"]


Object Methods
Objects can also have methods.
Methods are actions that can be performed on objects.
Methods are stored in properties as function definitions.

const person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};

The this Keyword
In a function definition, this refers to the "owner" of the function.
In the example above, this is the person object that "owns" the fullName function.
In other words, this.firstName means the firstName property of this object(person) i.e person.firstName


Accessing Object Methods
You access an object method with the following syntax:
objectName.methodName()
Example
name = person.fullName();



If you access an object method without (), it will return the function definition:
fullName : function() {
    return this.firstName + " " + this.lastName;
  }

name = person.fullName;
function() { return this.firstName + " " + this.lastName; }

A JavaScript object is a collection of named values
The named values, in JavaScript objects, are called properties.
It is a common practice to declare objects with the const keyword.
Methods are actions that can be performed on objects.




Creating a JavaScript Object

1.
Create a single object, using an object literal.
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

2.
Using the JavaScript Keyword new
const person = new Object();
person.firstName = "John";
person.lastName = "Doe";
person.age = 50;
person.eyeColor = "blue";

Objects are mutable: They are addressed by reference, not by value


