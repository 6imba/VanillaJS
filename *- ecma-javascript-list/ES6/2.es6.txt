Recent version of JS: ES6 / ES2015/ ECMAScript 6(specification defines what features are avialable in js)

Vanilla JavaScript ~ Common JS
ES6 is latest addition to JavaScript.
Node.js ~ server side JS
node.js also support es6.

var -> function scope
let -> block scope
const -> block scope

// Function Scope: When a variable is declared inside a function, it is only accessible within that function and cannot be used outside that function. Block Scope: A variable when declared inside the if or switch conditions or inside for or while loops, are accessible within that particular condition or loop.

access object preperty and method either using dot . notation or bracket [] notation.

this keyword in js. -> returns the reference to the js object.

standalone function ~ this ~ window object

every function in js is object having certain object members(properties and methods)


# Arrow function:

function square (numb){
	return numb * numb;
}

#1 NormalFunction as variable.
const square = function (numb){
	return numb * numb;
}

#2
const square = (numb) => {
	return numb * numb;
}

#3
const square = numb => {
	return numb * numb;
}

#4
const square = numb => numb * numb;

#5
const square = () => 2*2;

#6 method_syntax inside object in js
const person = {
	firstName: "Amir",
	lastName: "Shrestha",
	fullName: function() {
    			return this.firstName + " " + this.lastName;
  			  }
}
# In a function definition, this refers to the owner[person object] of the function[fullName].
person.fullName;
person['fullName']

#7 method_syntax inside object in es6
const person = {
	firstName: "Amir",
	lastName: "Shrestha",
	fullName() {return this.firstName + " " + this.lastName;}
}
person.fullName;
person['fullName']

# filter() methods
const students = [
	{name: "Amir", gender:"male", bool: true},
	{name: "Sita", gender:"female", bool: false},
	{name: "Jack", gender:"male", bool: true},
	{name: "Mita", gender:"female", bool: false},
	{name: "Hita", gender:"female", bool: false},
];

# filter() methods anonymous function
const male = students.filter(function (std) {return std.gender == "male"});
const female = students.filter(function (std) {return std.gender == "female"});

# filter() methods arrow function
const male = students.filter(std => std.gender == "male");
const female = students.filter(std => std.gender == "female");


# filter() methods arrow function
const male = students.filter(std => std.bool);
const female = students.filter(std => !std.bool);








# this keyword in js:
* In a function definition, this refers to the owner_object of the function.
const person = {
	meth1() {
		console.log(this);
	}
}
person.meth1(); ~ print object/object_defination in console
# if we call a functioin as a method in an object, this will always returns a refference to that object. However if we call a function as a stand_alone_object or outside of an object, this will return global object which is window object in browser.

function itself is an object.
const meth2 = person.meth1; //here meth1 is method of person object. In js a function itself is an object. But meth2 is a function as a stand_alone_object.

# if strick mode is enable, then this returns undefined if we call a function as a stand_alone_object or outside of an object.

So solution for no matter how we call this keyword, this will alaways return reference to its owner object is bind method of function object in js.


# callback function is not part of any object
# arrow function doesnt rebind this keyword.



# map() function in es6:

callback: callback are the function that are passed as a argument into another function. Not callback fucntion , its just callback.


callback in map fucntion:
const colors = ['red', 'blue', 'green', 'pink'];
const items = colors.map(function(color) {
	return '<li>' + color + '</li>';
})

Arrow function as callback in map fucntion:
const colors = ['red', 'blue', 'green', 'pink'];
const items = colors.map( color => '<li>' + color + '</li>'; )


Arrow function with template literals as callback in map fucntion:
const colors = ['red', 'blue', 'green', 'pink'];
const items = colors.map( color => `<li>${color}</li>`);


# Arrow Function and this in method inside object in es6:


#Object Destructuring:


#Spred Operator:

#Spred Operator in array:
const arr1 = [1,2,3];
const arr1 = [5,6,7];
const arr3 = [...arr1, 4, ...arr2, 8];
arr3 ==> [1,2,3,4,5,6,7,8]
spread operator to clone array. ==> const arr4 = [...arr3]

#Spred Operator in object:
const obj1 = [age: 22];
const obj1 = {age: 20};
const obj3 = {...obj1, name:'Amir', ...obj2, name:'Samir'}
obj3 ==> {age:22, name:'Amir', age:20, name:'Saimr'}
spread operator to clone object. ==> const obj4 = [...obj3]

#ECMAScript 6 compatibility table

Reference:

https://www.youtube.com/watch?v=NCwa_xi0Uuc&t=2790s
TABLE OF CONTENT: 
01:45 Let vs Var vs Const
05:39 Objects 
08:26 The this Keyword
11:17 Binding this
13:55 Arrow Functions
18:12 Arrow Functions and this
22:29 Array.map Method
26:06 Object Destructuring
28:37 Spread Operator
32:41 Classes
36:28 Inheritance 
40:33 Modules
44:45 Named and Default Exports
template literals ==> backtick ``