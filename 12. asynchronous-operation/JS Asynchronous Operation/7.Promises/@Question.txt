- Promise chaining.

------------------------------------------------------------------------------------------------------------------------------------------------

Q. Is callback inside promise() self executing in javascript?
Q. How is function inside Promise() invoked?
    - The Promise constructor takes a function (an executor) that will be executed immediately and passes in two functions: resolve , which must be called when the Promise is resolved (passing a result), and reject , when it is rejected (passing an error).

------------------------------------------------------------------------------------------------------------------------------------------------

# Way to handle Promise_Consuming_Code:

    - Producing Code:
        function myFun(num1, num2) {
            return new Promise((resolve, reject) => num1 + num2 > 50 ? resolve() : reject());
        }

    - Consuming Code1:
        myFun(70, 30)
        .then(
            () => console.log("Number Is Greater then 50 "),
            () => console.log("Number Is Less then 50 "),
        );

    - Consuming Code2:
        myFun(70, 30)
        .then(() => console.log("Number Is Greater then 50 "))
        .then(() => console.log("Number is less then 50"));

    - Consuming Code3:
        myFun(70, 30)
        .then(() => console.log("Number Is Greater then 50 "))
        .catch((err) => console.log("Number is less then 50"));

    - Consuming Code3:
        myFun(70, 30)
        .then(() => console.log("Number Is Greater then 50 "))
        .then(() => console.log("Number Is Greater then 50 "))
        .catch((err) => console.log("Number is less then 50"));

------------------------------------------------------------------------------------------------------------------------------------------------

# Promise Producing code:

    - asynchronous function:
        function myAsncFun(para1, para2) {
            return new Promise((resolve, reject) => {});
        }

    - variable
        const promiseObj = new Promise((resolve, reject) => {});

------------------------------------------------------------------------------------------------------------------------------------------------

# Constructor vs Class. ===> new Promise

Q. refactoring?

Q. 