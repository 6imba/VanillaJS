// # Example_1:
//     setTimeout(function() { myFunction("I love You !!!"); }, 3000);
//     function myFunction(value) {
//     document.getElementById("demo").innerHTML = value;
//     }

//     - In the example above:
//         - function(){ myFunction("I love You !!!"); }: is used as a callback. It is a complete function. The complete function is passed to setTimeout() as an argument.
//         - setTimeout(): is asynchronous.

// # Example_2:
//     setTimeout(()=>console.log("I am callback), 5000)

//     - In the example above:
//     - ()=>console.log("I am callback) ==>Callbacks
//     - setTimeout() ==> Asynchronous

// -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// - callback waits untill asynchronous gets done.
// -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// * In the real world, callbacks are most often used with asynchronous functions.
//     - callbacks is passed into asynchronous as parameter, so that it can be call later inside asynchronous.
//     - Where callbacks really shine are in asynchronous functions, where one function has to wait for another function.
//     - asynchronous Functions runs in parallel with other functions, doesn't happen at the same time, but runs at their own pace.
//     - asynchronous Functions will finish later. like: setTimeout, setInterval,

// * asynchronous Functions runs in parallel with other functions, doesn't happen at the same time.
//     - This means that function runs along with another function but doesnt stop/wait excuting if other function takes some time.
//     - runs paraleel but not at the same time wait, both runs at their own pace.
//     - In Software design, Asynchronous software design expands upon the concept by building code that allows a program to ask that
//       a task be performed alongside the original task (or tasks), without stopping to wait for the task to complete.

// # Therfore, asynchronous runs alongside callback, doesnt stops its flow but make callback wait for some time period.


// # Finally: : combo of asychronous{setTimeout, setInterval} and callback
    var second = 0;
    function callbackCallLater(){
        setTimeout(() => console.log('I am callBack!'), 3000); //setTimeout(asynchronous) with callback
    }
    function asynchronousFinishLater(callback){ //setTimeout(asynchronous) with callback
        console.log('Hi 1')
        console.log('Hi 2')
        callback();
        console.log('Hi 3')
        console.log('Hi 4')
        console.log('Hi 5')
        setInterval(() => {
            if(second<5){
                console.log('Second:', second += 1)
            }
            // else{
            //     clearInterval();
            // }
        }, 1000) //setInterval(asynchronous) with callback
        console.log('Hi 6')
        console.log('Hi 7')
        console.log('Hi 8')
    }
    asynchronousFinishLater(callbackCallLater);


// - asynchronous function return promise