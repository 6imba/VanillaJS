# Types of functions:
  1. Normal Function
  2. Function Expression
  3. Anonomous Function
  5. Fat_Arrow Function
  11. Callback Function(call-after/later/back)
  9. Inline/Inner Function
  10. Nested function
  6. Function as Method of Object
  7. Function as Method of Class
  12. Asynchronous Function
  4. Self Invoking Function
  8. Higher Order Function
  14. Function Constructor
  13. Constructor Function. (Object Constructor Function: self-defined or pre-defined)
  15. Constructor Method(inside/outside class + this keyword -> new keyword)
  16. Generator Function (https://www.geeksforgeeks.org/javascript-function-expression-2/)
  17. Factory function (return object)
  18. Node Module Wrapper function
  19. standalone function (this ~ window object)

*********************************************************************************************************

# 1.Normal function:
    function add(x,y) {
      return x+y;
    }

*********************************************************************************************************

# 6.Object method:
  - A function defined as the property of an object, is called a method to the object.
    > object method:
      add: function(x,y) {
        return this.x + this.y;
      }

    > object method:
      add: (x,y) => x + y;

    > object method: es6
      add(x,y) {
        return this.x + this.y;
      }
    
    - In a function definition, this refers to the owner[person object] of the function[fullName].
    - person.fullName;
    - person['fullName']


# 2.Function Expressions:
  const x = function (a, b) {return a * b};
  const z = x(4, 3);

    - function (a, b) {return a * b}; //anonomous funtion
    - const x = function (a, b) {return a * b}; //function expression
    - x(4, 3) // function invocation
    - const z = x(4, 3) //hold function return alue in variable.

*********************************************************************************************************
# 4.Self-Invoking Functions:
  - Function can be made "self-invoking".
  - A self-invoking expression is invoked (started) automatically, without being called.
  - Function expressions will execute automatically if the expression is followed by ().
  - You cannot self-invoke a function declaration.
  - You have to add parentheses around the function to indicate that it is a function expression:

  - Try Code:
    (function () {
      let x = "Hello!!";  // I will invoke myself
    })();
  - The function above is actually an anonymous self-invoking function (function without name).

*********************************************************************************************************

# 5. Function as a Method:
  const myObject = {
    firstName:"John",
    lastName: "Doe",
    fullName: function () {
      return this.firstName + " " + this.lastName;
    },
    function age () {
      return 23;
    },
    value: () => 20+3;
  }
  myObject.fullName(); 
  console.log(typeof(myObject.fullName))
  console.log(typeof myObject.fullName === 'function')

*********************************************************************************************************

# 6. The Function() Constructor:
  const myFunction = new Function("a", "b", "return a * b");
  const x = myFunction(4, 3);

*********************************************************************************************************

# 7. Custome function constructor:
  function myFunction(arg1, arg2) {
    this.firstName = arg1;
    this.lastName  = arg2;
  }
  - This creates a new object
    const funObj = new myFunction("John", "Doe");
  - This will return "John"
    myObj.firstName;

*********************************************************************************************************

# Arrow function:
  #2
  const square = (numb) => {
    return numb * numb;
  }

  #3
  const square = numb => {
    return numb * numb;
  }

  #4
  const square = numb => numb * numb;

  #5
  const square = () => 2*2;

*********************************************************************************************************
# 3. Function Hoisting:
    - JavaScript functions can be called before they are declared.
    - Try Code:
      myFunction(5);
      function myFunction(y) {
        return y * y;
      }

*********************************************************************************************************
