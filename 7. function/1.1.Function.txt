# Phases Of Function:
    1. Declaration/Defination
    2. Invocation/Call/Ente
    3. Return/Stop/Exist

  # Function Declaration/Defination:

    function myFunction(a, b) {
      return a * b;
    }
    const x = myFunction(4, 3);

    - function -> function declaration/defination keyword.
    - () -> function invoke operator.
    - (*args,) -> function parameter/argument.
    - {} -> function body.
    - return -> function return keyword.

    - normal function:
      function add(x,y) {
        return x+y;
      }

    - function expression:
      add = function(x,y){
        return x+y;
      }

    - arrow function:
      add = (x,y) => x+y;

    - object method:
      add: function(x,y) {
        return this.x + this.y;
      }

    - object method:
      add: (x,y) => x + y;

    - object method:
      add(x,y) {
        return this.x + this.y;
      }

  # Function Invocation
    - The code inside the function will execute when "something" invokes (calls) the function:
    - When an event occurs (when a user clicks a button)
    - When it is invoked (called) from JavaScript code
    - Automatically (self invoked)
    - When JavaScript reaches a return statement, the function will stop executing.
    - The () Operator Invokes the Function

  # Return from Functions:
    1. Implicit: Default
    2. Explicit: Manual

    - there is no implicit return in JavaScript functions, if you write a function using the function keyword. 
      i.e:
      function needsReturn()
      {
        console.log('function invoked');
      }
      needsReturn()    //returns undefined

    - Functions without a return statement return undefined by default.
    
    - But, this changes with arrow functions, which can potentially have an implicit return.
    - An arrow function expression is a compact alternative to a traditional function expression, but is limited and can't be used in all situations.
    - Single Expression Arrow Function Returns: resulting_executed_value by single_expression(here_acts _as_a_function_body)
    - For an arrow function to have an implicit return an expression is required.
    - Arrow functions can contain statements too, but now the function body must be surrounded by {curlies}. And as soon as you have curly braces surrounding your function body, returns are no longer implicit â€“ for either statements or expressions.
      i.e:
        const explicit = () => { return 'Hi' }
        explicit()

        const implicit = () => 'Hi'
        implicit()

*********************************************************************************************************

# Display function defination vs Display fucntion return value:
  <script>
    function add(a,b) {
      return a+b;
    }
    document.getElementById("demo").innerHTML = add //1
    document.getElementById("demo").innerHTML = add(2,3); //2
  </script>

  > OutPut:
    - function add(a,b) { return a+b; } //1
    - 5 //2

  > Conclution:
    - Using the example above, add //1 refers to the function object/defination, and add() //2 refers to the function returned value.
    - //1 prints function defination
    - //2 if function invocation return value if has, so displayed function returned value else displayed undefined. "() operator invoke function"

*********************************************************************************************************

# Scope of ad within functions:
  - Functions Used as Variable Values.
  - Local Variables.

*********************************************************************************************************

# Why Functions?
	> You can reuse code: Define the code once, and use it many times.

*********************************************************************************************************

# Types of functions:
  1. Normal Function
  2. Function Expression
  3. Anonomous Function
  4. Self Invoking Function
  5. Fat_Arrow Function
  6. Function as Method of Object
  7. Function as Method of Class
  8. Higher Order Function
  9. Inline/Inner Function
  10. Nested function
  11. Callback Function(call-after/later/back)
  12. Asynchronous Function
  13. Constructor Function. (Object Constructor Function: self-defined or pre-defined)
  14. Function Constructor
  15. Constructor Method(inside/outside class + this keyword -> new keyword)
  16. Generator Function (https://www.geeksforgeeks.org/javascript-function-expression-2/)
  17. Factory function (return object)
  18. Node Module Wrapper function

*********************************************************************************************************

# 2.Function Expressions:
  const x = function (a, b) {return a * b};
  const z = x(4, 3);

    - function (a, b) {return a * b}; //anonomous funtion
    - const x = function (a, b) {return a * b}; //function expression
    - x(4, 3) // function invocation
    - const z = x(4, 3) //hold function return alue in variable.

*********************************************************************************************************

# 3. Function Hoisting:
    - JavaScript functions can be called before they are declared.
    - Try Code:
      myFunction(5);
      function myFunction(y) {
        return y * y;
      }

*********************************************************************************************************

# 4.Self-Invoking Functions:
  - Function can be made "self-invoking".
  - A self-invoking expression is invoked (started) automatically, without being called.
  - Function expressions will execute automatically if the expression is followed by ().
  - You cannot self-invoke a function declaration.
  - You have to add parentheses around the function to indicate that it is a function expression:

  - Try Code:
    (function () {
      let x = "Hello!!";  // I will invoke myself
    })();
  - The function above is actually an anonymous self-invoking function (function without name).

*********************************************************************************************************

# 5. Function as a Method:
  const myObject = {
    firstName:"John",
    lastName: "Doe",
    fullName: function () {
      return this.firstName + " " + this.lastName;
    },
    function age () {
      return 23;
    },
    value: () => 20+3;
  }
  myObject.fullName(); 
  console.log(typeof(myObject.fullName))
  console.log(typeof myObject.fullName === 'function')

*********************************************************************************************************

# 6. The Function() Constructor:
  const myFunction = new Function("a", "b", "return a * b");
  const x = myFunction(4, 3);

*********************************************************************************************************

# 7. Custome function constructor:
  function myFunction(arg1, arg2) {
    this.firstName = arg1;
    this.lastName  = arg2;
  }
  - This creates a new object
    const funObj = new myFunction("John", "Doe");
  - This will return "John"
    myObj.firstName;

*********************************************************************************************************

> Function Constructor vs Constructor Function: 
    - Function Constructor is the function that creates function.
        where as
    - Constructor Function is used to create objects:promise_object,array_object,Object_object,Number_object,String_object, so on.
    
    # Example:
        - Function Constructor: Function  ==>  new Function('a', 'b', 'return a + b');
        - Constructor Function: Array,Promise
            - Constructor Function can be pre-define/native/built-in as well as custome/self-defined.

************************************************************************************************************************

# Function are object:
  - The typeof operator in JavaScript returns "function" for functions.
  - But, JavaScript functions can best be described as objects.
  - JavaScript functions have both properties and methods.
  - The arguments.length property returns the number of arguments received when the function was invoked.
  - The toString() method returns the function as a string.

*********************************************************************************************************

# Notes:
  - A function defined as the property of an object, is called a method to the object.
  - A function designed to create new objects, is called an object constructor.

*********************************************************************************************************

# Summary:
  - JavaScript functions can be used as values:
  - JavaScript functions can be used in expressions:
  - Functions are Objects
  - Arrow Functions
  - The Arguments Object
  - Arguments are Passed by Value
  - Objects are Passed by Reference
  - Function are object.
