
  Implicit: Default
  Explicit: Manual

  There is no implicit return in JavaScript functions, if you write a function using the function keyword. 
  i.e:
  function needsReturn()
  {
    console.log('function invoked');
  }
  needsReturn()    //returns undefined


Functions without a return statement return undefined by default.
But, this changes with arrow functions, which can potentially have an implicit return.

An arrow function expression is a compact alternative to a traditional function expression, but is limited and can't be used in all situations.
Single Expression Arrow Function Returns: resulting_executed_value by single_expression(here_acts _as_a_function_body)
For an arrow function to have an implicit return an expression is required.
Arrow functions can contain statements too, but now the function body must be surrounded by {curlies}. And as soon as you have curly braces surrounding your function body, returns are no longer implicit â€“ for either statements or expressions.

A contrasting example could be a ternary expression vs. an if statement. Both are used for conditional branching in the code.

const explicit = () => { return 'Hi' }
explicit()

const implicit = () => 'Hi'
implicit()
