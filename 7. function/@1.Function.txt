<script>
  function add(a,b) {
    return a+b;
  }
  document.getElementById("demo").innerHTML = add #1
  document.getElementById("demo").innerHTML = add(2,3); #2
</script>

# OutPut:
  - function add(a,b) { return a+b; } #1
  - 5 #2

Conclution:
  - Using the example above, add #1 refers to the function object, and add() #2 refers to the function result.
  - #1 prints function defination
  - #2 if function invocation so prints function return. "() operator invoke function"

*********************************************************************************************************

# 1.Function declarations/defination:
  function myFunction(a, b) {
    return a * b;
  }
  const x = myFunction(4, 3);

*********************************************************************************************************

# 2.Function Expressions:
  const x = function (a, b) {return a * b};
  const z = x(4, 3);

*********************************************************************************************************

# 3. The Function() Constructor:
  const myFunction = new Function("a", "b", "return a * b");
  const x = myFunction(4, 3);

*********************************************************************************************************

- function -> function declaration/defination keyword.
- () -> function invoke operator.
- (*args,) -> function parameter/argument.
- {} -> function body.
- return -> function return keyword.

*********************************************************************************************************

# 4. Custome function constructor:
  function myFunction(arg1, arg2) {
    this.firstName = arg1;
    this.lastName  = arg2;
  }
  - This creates a new object
    const funObj = new myFunction("John", "Doe");
  - This will return "John"
    myObj.firstName;

*********************************************************************************************************

# 5. Function Hoisting:
    - JavaScript functions can be called before they are declared.
    - Try Code:
      myFunction(5);
      function myFunction(y) {
        return y * y;
      }

*********************************************************************************************************

- Function Invocation
  The code inside the function will execute when "something" invokes (calls) the function:
  When an event occurs (when a user clicks a button)
  When it is invoked (called) from JavaScript code
  Automatically (self invoked)
- When JavaScript reaches a return statement, the function will stop executing.

*********************************************************************************************************

# 6.Self-Invoking Functions:
  - Function can be made "self-invoking".
  - A self-invoking expression is invoked (started) automatically, without being called.
  - Function expressions will execute automatically if the expression is followed by ().
  - You cannot self-invoke a function declaration.
  - You have to add parentheses around the function to indicate that it is a function expression:

  - Try Code:
    (function () {
      let x = "Hello!!";  // I will invoke myself
    })();
  - The function above is actually an anonymous self-invoking function (function without name).

*********************************************************************************************************

# 7. Function as a Method:
  const myObject = {
    firstName:"John",
    lastName: "Doe",
    fullName: function () {
      return this.firstName + " " + this.lastName;
    }
  }
  myObject.fullName(); 
  console.log(typeof(myObject.fullName))
  console.log(typeof myObject.fullName === 'function')

*********************************************************************************************************

# Function are object:
  - The typeof operator in JavaScript returns "function" for functions.
  - But, JavaScript functions can best be described as objects.
  - JavaScript functions have both properties and methods.
  - The arguments.length property returns the number of arguments received when the function was invoked.
  - The toString() method returns the function as a string.

*********************************************************************************************************

# Notes:
  - A function defined as the property of an object, is called a method to the object.
  - A function designed to create new objects, is called an object constructor.

*********************************************************************************************************

# Summary:
  - JavaScript functions can be used as values:
  - JavaScript functions can be used in expressions:
  - Functions are Objects
  - Arrow Functions
  - The Arguments Object
  - Arguments are Passed by Value
  - Objects are Passed by Reference
  - Function are object.